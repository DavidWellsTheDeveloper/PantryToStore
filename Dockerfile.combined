# Combined Frontend + Backend + Nginx Reverse Proxy
# This single container serves everything through Nginx

# ========================================
# Stage 1: Build Frontend
# ========================================
FROM node:18-alpine AS frontend-builder

WORKDIR /app/frontend

# Copy frontend package files
COPY frontend/package*.json ./
RUN npm ci --only=production

# Copy frontend source and build
COPY frontend/ ./
RUN npm run build

# ========================================
# Stage 2: Build Backend
# ========================================
FROM python:3.11-slim AS backend-builder

WORKDIR /app/backend

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    pkg-config \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy backend requirements and install
COPY backend/requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

# Copy backend source
COPY backend/ ./

# Skip static collection during build - will be done at runtime
# ENV DJANGO_SETTINGS_MODULE=backend.settings_production
# RUN python manage.py collectstatic --noinput

# ========================================
# Stage 3: Final Runtime Image
# ========================================
FROM nginx:alpine

# Install Python and dependencies
RUN apk add --no-cache \
    python3 \
    py3-pip \
    postgresql-dev \
    gcc \
    python3-dev \
    musl-dev \
    curl

# Create virtual environment and install Python packages
COPY backend/requirements.txt /tmp/
RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
RUN pip install --no-cache-dir -r /tmp/requirements.txt

# Copy backend application
COPY --from=backend-builder /app/backend /app/backend
WORKDIR /app/backend

# Remove default Nginx files and copy frontend build
RUN rm -rf /usr/share/nginx/html/*
COPY --from=frontend-builder /app/frontend/.output/public /usr/share/nginx/html

# Static files will be collected at runtime and served by Django
# COPY --from=backend-builder /app/backend/staticfiles /usr/share/nginx/html/static

# Create Nginx configuration
RUN rm /etc/nginx/conf.d/default.conf
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Create startup script
COPY start.sh /start.sh
RUN chmod +x /start.sh

# Create log directories
RUN mkdir -p /var/log/django

# Expose port 80
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost/api/health/ || exit 1

# Start both Nginx and Django
CMD ["/start.sh"]